""""""  		  	   		   	 			  		 			 	 	 		 		 	
"""  		  	   		   	 			  		 			 	 	 		 		 	
template for generating data to fool learners (c) 2016 Tucker Balch  		  	   		   	 			  		 			 	 	 		 		 	
Copyright 2018, Georgia Institute of Technology (Georgia Tech)  		  	   		   	 			  		 			 	 	 		 		 	
Atlanta, Georgia 30332  		  	   		   	 			  		 			 	 	 		 		 	
All Rights Reserved  		  	   		   	 			  		 			 	 	 		 		 	
  		  	   		   	 			  		 			 	 	 		 		 	
Template code for CS 4646/7646  		  	   		   	 			  		 			 	 	 		 		 	
  		  	   		   	 			  		 			 	 	 		 		 	
Georgia Tech asserts copyright ownership of this template and all derivative  		  	   		   	 			  		 			 	 	 		 		 	
works, including solutions to the projects assigned in this course. Students  		  	   		   	 			  		 			 	 	 		 		 	
and other users of this template code are advised not to share it with others  		  	   		   	 			  		 			 	 	 		 		 	
or to make it available on publicly viewable websites including repositories  		  	   		   	 			  		 			 	 	 		 		 	
such as github and gitlab.  This copyright statement should not be removed  		  	   		   	 			  		 			 	 	 		 		 	
or edited.  		  	   		   	 			  		 			 	 	 		 		 	
  		  	   		   	 			  		 			 	 	 		 		 	
We do grant permission to share solutions privately with non-students such  		  	   		   	 			  		 			 	 	 		 		 	
as potential employers. However, sharing with other current or future  		  	   		   	 			  		 			 	 	 		 		 	
students of CS 7646 is prohibited and subject to being investigated as a  		  	   		   	 			  		 			 	 	 		 		 	
GT honor code violation.  		  	   		   	 			  		 			 	 	 		 		 	
  		  	   		   	 			  		 			 	 	 		 		 	
-----do not edit anything above this line---  		  	   		   	 			  		 			 	 	 		 		 	
  		  	   		   	 			  		 			 	 	 		 		 	
Student Name: Stella Lai Hoong Soh (replace with your name)  		  	   		   	 			  		 			 	 	 		 		 	
GT User ID: lsoh3 (replace with your User ID)  		  	   		   	 			  		 			 	 	 		 		 	
GT ID: 903641298 (replace with your GT ID)  		  	   		   	 			  		 			 	 	 		 		 	
"""  		  	   		   	 			  		 			 	 	 		 		 	
  		  	   		   	 			  		 			 	 	 		 		 	
import math  		  	   		   	 			  		 			 	 	 		 		 	
  		  	   		   	 			  		 			 	 	 		 		 	
import numpy as np


# this function should return a dataset (X and Y) that will work  		  	   		   	 			  		 			 	 	 		 		 	
# better for linear regression than decision trees  		  	   		   	 			  		 			 	 	 		 		 	
def best_4_lin_reg(seed=1489683273):  		  	   		   	 			  		 			 	 	 		 		 	
    """  		  	   		   	 			  		 			 	 	 		 		 	
    Returns data that performs significantly better with LinRegLearner than DTLearner.  		  	   		   	 			  		 			 	 	 		 		 	
    The data set should include from 2 to 10 columns in X, and one column in Y.  		  	   		   	 			  		 			 	 	 		 		 	
    The data should contain from 10 (minimum) to 1000 (maximum) rows.  		  	   		   	 			  		 			 	 	 		 		 	
  		  	   		   	 			  		 			 	 	 		 		 	
    :param seed: The random seed for your data generation.  		  	   		   	 			  		 			 	 	 		 		 	
    :type seed: int  		  	   		   	 			  		 			 	 	 		 		 	
    :return: Returns data that performs significantly better with LinRegLearner than DTLearner.  		  	   		   	 			  		 			 	 	 		 		 	
    :rtype: numpy.ndarray  		  	   		   	 			  		 			 	 	 		 		 	
    """  		  	   		   	 			  		 			 	 	 		 		 	
    np.random.seed(seed)  		  	   		   	 			  		 			 	 	 		 		 	

    # Columns in the dataset span from 2 to 10 columns in X and one column in Y.
    num_cols = 10

    # Rows in the data set span from 10 to 1000
    num_rows = 1000

    # Matrix X (i.e. the features) is generated by drawing from a random normal distribution
    X = np.random.normal(size=(num_rows, num_cols))

    # Weights wt is a 4x1 ndarray
    wt = np.ones((num_cols,1))*0.2

    # Y is the matrix multiplication of X and wt
    Y = np.dot(X, wt).reshape(num_rows)

    return X, Y


def dt_assign_one(data_x, split_values, depth=0):
    """
    The list of (num_cols) split values contains the np.mean() values of each feature values
    in each column. We start from the root node, of which the depth is 0. This recursive function
    calls itself till the base case of depth=(num_cols -1) is reached. The result returned back at
    depth=0 is the encoding value (from traversing to the left or right of the tree) at the leaf.

    :param data_x: The X values (i.e. the features) part of the dataset.
    :type data_x: float
    :param split_values: The list of (num_cols) split values that results from np.mean() of each
                         feature values in each column
    :type split_values : float
    :param depth : The level at which computation is done on the decision tree. depth=0 is the
                   level where root node resides.
    :type depth : int
    :return: Returns the result of either traversing to the left or right tree. Result is encoded in
             that 0 is given if code traverses to the left, and 1 is given if code traverses to the right
             of the decision tree.
    :rtype: int
    """
    # If you have reached the last element in the list split_values
    if depth == len(split_values) - 1:
        # Check if the row_data[depth] is less than or equal to split_values[depth].
        # If so, move to the left (i.e. returning 0). Otherwise, move to the right
        # (i.e. returning 1)
        if data_x[depth] <= split_values[depth]:
            return 0
        else:
            return 1

    if data_x[depth] <= split_values[depth]:
        # The encoding is such that traversing to the left tree
        # gets the value of 0. Bitwise left shift by 1 to make room
        # for the next value to be returned.
        return dt_assign_one(data_x, split_values, depth+1) << 1

    else:
        # The encoding is such that traversing to the right tree gets the
        # value of 1. Bitwise left shit by 1 to make room for the next value
        # and add 1.
        return (dt_assign_one(data_x, split_values, depth+1) << 1) + 1


def dt_assign(data_x):
    """
    By iterating over the X-values part of the dataset (i.e. the num_rows), this function calls
    on the recursive function dt_assign_one(), and append to list y after each iteration.

    :param data_x: The X-values part of the dataset
    :type data_x: float
    :return: Returns the result of appending dt_assign_one() to y list
    :rtype: int
    """
    # split_values is a 1-d list of means iterated over the rows
    split_values = data_x.mean(axis=0)

    # y is an empty list that would hold the result of appending dt_assign_one()
    y = []
    for row in range(data_x.shape[0]):
        y.append(dt_assign_one(data_x[row, :], split_values, 0))

    return np.array(y)


def best_4_dt(seed=1489683273):  		  	   		   	 			  		 			 	 	 		 		 	
    """  		  	   		   	 			  		 			 	 	 		 		 	
    Returns data that performs significantly better with DTLearner than LinRegLearner.  		  	   		   	 			  		 			 	 	 		 		 	
    The data set should include from 2 to 10 columns in X, and one column in Y.  		  	   		   	 			  		 			 	 	 		 		 	
    The data should contain from 10 (minimum) to 1000 (maximum) rows.  		  	   		   	 			  		 			 	 	 		 		 	
  		  	   		   	 			  		 			 	 	 		 		 	
    :param seed: The random seed for your data generation.  		  	   		   	 			  		 			 	 	 		 		 	
    :type seed: int  		  	   		   	 			  		 			 	 	 		 		 	
    :return: Returns data that performs significantly better with DTLearner than LinRegLearner.  		  	   		   	 			  		 			 	 	 		 		 	
    :rtype: numpy.ndarray  		  	   		   	 			  		 			 	 	 		 		 	
    """  		  	   		   	 			  		 			 	 	 		 		 	
    np.random.seed(seed)

    # Columns span from 2 to 10 columns in X, and 1 column in Y
    num_cols = 10

    # Rows span from 10 to 1000
    num_rows = 1000

    # Generate X values (i.e. the features) by drawing from a continuous uniform distribution
    # over [num_rows, num_cols)
    X_val = np.random.random(size=(num_rows, num_cols))

    Y_val = dt_assign(X_val)

    return X_val, Y_val

  		  	   		   	 			  		 			 	 	 		 		 	
  		  	   		   	 			  		 			 	 	 		 		 	
def author():  		  	   		   	 			  		 			 	 	 		 		 	
    """  		  	   		   	 			  		 			 	 	 		 		 	
    :return: The GT username of the student  		  	   		   	 			  		 			 	 	 		 		 	
    :rtype: str  		  	   		   	 			  		 			 	 	 		 		 	
    """  		  	   		   	 			  		 			 	 	 		 		 	
    return "lsoh3"  # Change this to your user ID
  		  	   		   	 			  		 			 	 	 		 		 	
  		  	   		   	 			  		 			 	 	 		 		 	
if __name__ == "__main__":  		  	   		   	 			  		 			 	 	 		 		 	
    print("they call me Tim.")  		  	   		   	 			  		 			 	 	 		 		 	
